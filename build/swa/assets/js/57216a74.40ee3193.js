"use strict";(self.webpackChunkapi_documentation=self.webpackChunkapi_documentation||[]).push([[4532],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,h=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(h,s(s({ref:t},u),{},{components:n})):a.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),r=n(6010);const o={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,s),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>S});var a=n(7462),r=n(7294),o=n(6010),s=n(2466),i=n(6550),c=n(1980),l=n(7392),u=n(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=p(e),[s,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[c,l]=h({queryString:n,groupId:a}),[d,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),g=(()=>{const e=c??d;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{g&&i(g)}),[g]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),l(e),f(e)}),[l,f,o]),tabValues:o}}var g=n(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:i,selectValue:c,tabValues:l}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),p=e=>{const t=e.currentTarget,n=u.indexOf(t),a=l[n].value;a!==i&&(d(t),c(a))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},l.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:p},s,{className:(0,o.Z)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":i===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=f(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",b.tabList)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function S(e){const t=(0,g.Z)();return r.createElement(k,(0,a.Z)({key:String(t)},e))}},4818:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(7462),r=(n(7294),n(3905)),o=n(4866),s=n(5162);const i={sidebar_position:3},c="List contacts",l={unversionedId:"Contacts/list_contacts",id:"Contacts/list_contacts",title:"List contacts",description:"The following  code snippet demonstrates how to retrieve a list of contacts from the HudumaSMS system. For instance we create a function called listContacts. This function makes a GET request to the HudumaSMS API endpoint, including the specified parameters (records and page) in the URL. The request includes the authorization token in the headers.",source:"@site/docs/Contacts/list_contacts.md",sourceDirName:"Contacts",slug:"/Contacts/list_contacts",permalink:"/swa/docs/Contacts/list_contacts",draft:!1,editUrl:"https://github.com/MegaJoint/api-documentation/tree/master/docs/Contacts/list_contacts.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Edit contact",permalink:"/swa/docs/Contacts/edit_contact"},next:{title:"Import contacts",permalink:"/swa/docs/Contacts/import_contact"}},u={},d=[],p={toc:d},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"list-contacts"},"List contacts"),(0,r.kt)("p",null,"The following  code snippet demonstrates how to retrieve a list of contacts from the HudumaSMS system. For instance we create a function called ",(0,r.kt)("inlineCode",{parentName:"p"},"listContacts"),". This function makes a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," request to the HudumaSMS API endpoint, including the specified parameters (",(0,r.kt)("inlineCode",{parentName:"p"},"records")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"page"),") in the URL. The request includes the authorization token in the headers."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"Javascript",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Function to list contacts\nconst listContacts = async () => {\n  try {\n    const records = 20\n    const page = 1\n    const baseURL = \"https://dev.hudumasms.com\"; // Replace with your HudumaSMS base URL\n    const response = await fetch(`${baseURL}/api/contacts/list/records/${records}?page=${page}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n    });\n\n    const json = await response.json()\n    if (response.ok) {\n      setContacts(json.data.data)\n    }\n\n    if (!response.ok) {\n      setIsLoading(false)\n      console.log(json.message)\n    }\n  } catch (err) {\n    console.log('Error while listing contacts');\n  }\n}\n")),(0,r.kt)("p",null,"In this code snippet, the ",(0,r.kt)("inlineCode",{parentName:"p"},"listContacts")," function is defined to retrieve a list of contacts from the HudumaSMS system. It sends a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," request to the HudumaSMS API endpoint, appending the ",(0,r.kt)("inlineCode",{parentName:"p"},"records")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"page")," parameters to the URL. The authorization token is included in the request headers."),(0,r.kt)("p",null,"If the response is successful (",(0,r.kt)("inlineCode",{parentName:"p"},"response.ok"),"), the contact data is extracted from the JSON response and assigned to corresponding variables. Pagination-related information, such as the total number of items, the range of displayed items, and the page indexes, is also updated."),(0,r.kt)("p",null,"If the response is not successful, the error message from the JSON response is logged to the console using ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log"),".")),(0,r.kt)(s.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n// Function to list contacts\nfunction listContacts() {\n  try {\n    $baseURL = \"https://dev.hudumasms.com\"; // Replace with your HudumaSMS base URL\n    $records = 10; // Specify the number of records to retrieve\n    $page = 1; // Specify the page number\n    \n    $url = $baseURL . \"/api/contacts/list/records/$records?page=$page\";\n    $headers = [\n      'Authorization: Bearer ' . $token,\n    ];\n\n    // Initialize a new HTTP request\n    $request = new HttpRequest();\n    $request->setUrl($url);\n    $request->setMethod(HttpRequest::METHOD_GET);\n    $request->setHeaders($headers);\n\n    // Send the HTTP request\n    $response = $request->send();\n\n    // Check the response status\n    if ($response->getStatusCode() === 200) {\n      $json = $response->getBody();\n      $data = json_decode($json, true);\n\n      // Retrieve the contacts\n      $contacts = $data['data'];\n\n      // Return the retrieved contacts\n      return $contacts;\n    } else {\n      $json = $response->getBody();\n      $data = json_decode($json, true);\n      throw new Exception($data['message']);\n    }\n  } catch (Exception $e) {\n    echo \"Error while listing contacts: \" . $e->getMessage();\n  }\n}\n?>\n")),(0,r.kt)("p",null,"In this simplified version, the ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpRequest")," class is used to send the HTTP request to the HudumaSMS API endpoint. The response is checked for a status code of 200 (indicating success), and the JSON response is processed accordingly."),(0,r.kt)("p",null,"Please note that you may need to include the necessary dependencies or adjust the code based on your specific PHP environment and the HTTP library you are using.")),(0,r.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},"Java code snippet for listing contacts from the HudumaSMS system:",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class ContactLister {\n    public static void main(String[] args) {\n        try {\n            String baseURL = "https://dev.hudumasms.com"; // Replace with your HudumaSMS base URL\n            int records = 10; // Specify the number of records to retrieve\n            int page = 1; // Specify the page number\n            \n            String url = baseURL + "/api/contacts/list/records/" + records + "?page=" + page;\n            \n            URL apiUrl = new URL(url);\n            HttpURLConnection connection = (HttpURLConnection) apiUrl.openConnection();\n            connection.setRequestMethod("GET");\n            \n            // Add authorization token to headers\n            String token = "YOUR_AUTH_TOKEN"; // Replace with your authorization token\n            connection.setRequestProperty("Authorization", "Bearer " + token);\n            \n            int responseCode = connection.getResponseCode();\n            \n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n                String line;\n                StringBuilder response = new StringBuilder();\n                \n                while ((line = reader.readLine()) != null) {\n                    response.append(line);\n                }\n                \n                reader.close();\n                \n                // Process the JSON response\n                String jsonResponse = response.toString();\n                // TODO: Parse the JSON and retrieve the contacts\n                \n                System.out.println("Contacts retrieved successfully.");\n            } else {\n                System.out.println("Failed to retrieve contacts. Response code: " + responseCode);\n            }\n            \n            connection.disconnect();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n')),(0,r.kt)("p",null,"Using Java, a ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpURLConnection")," object is used to send a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," request to the HudumaSMS API endpoint, including the specified parameters (",(0,r.kt)("inlineCode",{parentName:"p"},"records")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"page"),") in the URL. The authorization token is added to the request headers."),(0,r.kt)("p",null,"The response code is checked to determine if the request was successful. If the response code is ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP_OK")," (indicating success), the response is read and processed accordingly. Please note that you will need to add the necessary JSON parsing logic to retrieve the contacts from the JSON response."),(0,r.kt)("p",null,"Remember to replace ",(0,r.kt)("inlineCode",{parentName:"p"},'"YOUR_AUTH_TOKEN"')," with your actual authorization token."))))}h.isMDXComponent=!0}}]);